expend_df %>%
ggplot(aes(x = expenditure, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0, width = 0, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Units Sold", y = "Price", color = "Buyer Origin") +
theme_bw()
zeros_by_price <- tmp %>%
group_by(price, store_names, buyer_node) %>%
summarise(units_sold = sum(max_u))
knitr::opts_chunk$set(echo = TRUE)
##---------------------------------------------------------------
##                  Remove unnecessary clutter                  --
##---------------------------------------------------------------
rm(list = ls()) # Take out the Environment "trash"
cat("\014")  # Clear console, making error checking easier
while(!is.null(dev.list())) dev.off() # Clear old plots
#setwd("~/")
##---------------------------------------------------------------
##                        Load Packages                        --
##---------------------------------------------------------------
library(bannerCommenter)
library(tidyverse)
library(truncnorm)
library(magrittr)
library(gtools)
set.seed(298475)
## -------------------------------------------
## Define number nodes and each buyer in node
## -------------------------------------------
n_nodes <- 4
n_buyers <- 300
## -------------------------------------------
## Make income matrix
## -------------------------------------------
income_means <- c(620, 610, 605, 590)
income_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(i in 1:n_nodes){
vec_inc <- rep(income_means[i], n_buyers)
income_dat[, i] <- vec_inc
}
## -------------------------------------------
## Make travel cost matrix
## -------------------------------------------
t_means <- c(1, 1.2, 1.4, 1.8)
t_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(t in 1:n_nodes){
vec_t <- rep(t_means[t], n_buyers)
t_dat[, t] <- vec_t
}
## ----------------------------------------------
## Distance matrix (manually)
## ----------------------------------------------
distances1 <- c(0, 1, 1, sqrt(2))
distances2 <- c(1, 0, sqrt(2), 1)
distances3 <- c(1, sqrt(2), 0, 1)
distances4 <- c(sqrt(2), 1, 1, 0)
distances <- data.frame(distances1, distances2, distances3, distances4)
## -------------------------------------------
## Make price sensitivity vector
## -------------------------------------------
p_means <- c(0.75, 1, 1, 1.5)
#p_means <- c(1, 1, 1, 1)
## ----------------------------------------------
## Price sensitivity
## ----------------------------------------------
alpha <- 1
## ----------------------------------------------
## Distance multiplier
## ----------------------------------------------
beta <- 0.5 # 1 then 0.5
## ----------------------------------------------
## Home store advantage
## ----------------------------------------------
home_adv <- 0.5
## ----------------------------------------------
## Make store specific utilities
## ----------------------------------------------
store_quality <- c(3.5, 3.4, 3.3, 3.1)
#store_quality <- c(3, 3, 3, 3)
#possible_price <- c(70:80)
#possible_price <- c(6, 7, 8, 9)
price_matrix <- matrix(nrow = length(seq(0, 300, 10)), ncol = 4)
price_matrix[,1] <- seq(0, 300, 10)
price_matrix[,2] <- seq(0, 300, 10)
price_matrix[,3] <- seq(0, 300, 10)
price_matrix[,4] <- seq(0, 300, 10)
#price_matrix <- permutations(n=length(possible_price), r=4, v = possible_price, repeats.allowed = T)
# But what if every store has the same price, but one changes?
price_matrix <- matrix(nrow = length(seq(1, 30, 1)), ncol = 4)
price_matrix[,1] <- rep(4, times = nrow(price_matrix))
price_matrix[,2] <- rep(4, times = nrow(price_matrix))
price_matrix[,3] <- rep(4, times = nrow(price_matrix))
#price_matrix[,3] <- seq(1, 30, 1)
price_matrix[,4] <- seq(1, 30, 1)
#rep(50, times = nrow(price_matrix))
## ----------------------------------------------
## Create node/buyer matrices
## ----------------------------------------------
full_df <- data.frame(matrix(nrow = 0, ncol = 7))
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
start_loop <- Sys.time()
for(p in 1:nrow(price_matrix)){
for(n in 1:n_nodes){
M <- matrix(NA, nrow = n_buyers*n_nodes, ncol = ncol(full_df)-1)
M[,1] <- rep(store_quality, n_buyers) # -- fill in the V_n
M[,2] <- rep(home_adv, n_buyers) # -- fill in the buy-from-home preference
M[,3] <- rep(log(income_means[n]), n_buyers*n_nodes) # -- fill in the income
M[,4] <- rep(log(price_matrix[p,]), n_buyers) # -- fill in the price
M[,5] <- rep(distances[,n], n_buyers) # -- fill in the distances
# the following shock can dramatically change the outcome
M[,6] <- rtruncnorm(n_buyers*n_nodes,
a = -2,
b = 2,
mean = 0,
sd = 0.75)
I <- matrix(c(1,1,p_means[n]*alpha,-p_means[n]*alpha,-t_means[n]*beta,1))
U <- M %*% I
B_df <- as.data.frame(M)
B_df <- cbind(B_df, U)
full_df <- rbind(full_df, B_df)
}
}
end_loop <- Sys.time()
time_to_run <- end_loop - start_loop
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
## ----------------------------------------------
## Make store names
## ----------------------------------------------
store_names <- c("A", "B", "C", "D")
store_names <- rep(store_names, times = n_buyers*n_nodes*p)
buyer_ids <- rep(1:(n_buyers*n_nodes), each = n_nodes, times = p)
buyer_node <- rep(c("A", "B", "C", "D"), each = n_buyers*n_nodes, times = p)
price_row <- rep(1:p, each = n_nodes*n_buyers*n_nodes)
full_df %<>%
add_column(buyer_ids, .before = "vn") %>%
add_column(price_row, .before = "vn") %>%
add_column(store_names, .before = "vn") %>%
add_column(buyer_node, .after = "buyer_ids")
tmp <- full_df %>%
group_by(buyer_ids, price_row) %>%
mutate(max_u = ifelse(utiltiy == max(utiltiy) & utiltiy > 0, 1, 0))
expend_df <- tmp %>%
group_by(price_row, price, store_names
, buyer_node # -- comment out for total expenditure in a store
) %>%
summarise(expenditure = sum(max_u)) %>%
mutate(revenue = expenditure*price)
expend_df %>%
group_by(price_row, price, store_names) %>%
summarise(total_rev = sum(revenue)) %>%
ggplot(aes(x = total_rev, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point() +
#geom_jitter(height = 0.15, width = 0,) +
facet_wrap(~store_names) +
labs(x = "Total Rev.", y = "ln(Price)") +
theme_bw()
expend_df %>%
ggplot(aes(x = revenue, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0, width = 0, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Rev. Earned", y = "Price", color = "Buyer Origin") +
theme_bw()
expend_df %>%
ggplot(aes(x = expenditure, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0, width = 0, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Units Sold", y = "Price", color = "Buyer Origin") +
theme_bw()
zeros_by_price <- tmp %>%
group_by(price, store_names, buyer_node) %>%
summarise(units_sold = sum(max_u))
knitr::opts_chunk$set(echo = TRUE)
##---------------------------------------------------------------
##                  Remove unnecessary clutter                  --
##---------------------------------------------------------------
rm(list = ls()) # Take out the Environment "trash"
cat("\014")  # Clear console, making error checking easier
while(!is.null(dev.list())) dev.off() # Clear old plots
#setwd("~/")
##---------------------------------------------------------------
##                        Load Packages                        --
##---------------------------------------------------------------
library(bannerCommenter)
library(tidyverse)
library(truncnorm)
library(magrittr)
library(gtools)
set.seed(298475)
## -------------------------------------------
## Define number nodes and each buyer in node
## -------------------------------------------
n_nodes <- 4
n_buyers <- 300
## -------------------------------------------
## Make income matrix
## -------------------------------------------
income_means <- c(620, 610, 605, 590)
income_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(i in 1:n_nodes){
vec_inc <- rep(income_means[i], n_buyers)
income_dat[, i] <- vec_inc
}
## -------------------------------------------
## Make travel cost matrix
## -------------------------------------------
t_means <- c(1, 1.2, 1.4, 1.8)
t_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(t in 1:n_nodes){
vec_t <- rep(t_means[t], n_buyers)
t_dat[, t] <- vec_t
}
## ----------------------------------------------
## Distance matrix (manually)
## ----------------------------------------------
distances1 <- c(0, 1, 1, sqrt(2))
distances2 <- c(1, 0, sqrt(2), 1)
distances3 <- c(1, sqrt(2), 0, 1)
distances4 <- c(sqrt(2), 1, 1, 0)
distances <- data.frame(distances1, distances2, distances3, distances4)
## -------------------------------------------
## Make price sensitivity vector
## -------------------------------------------
p_means <- c(0.75, 1, 1, 1.5)
#p_means <- c(1, 1, 1, 1)
## ----------------------------------------------
## Price sensitivity
## ----------------------------------------------
alpha <- 1
## ----------------------------------------------
## Distance multiplier
## ----------------------------------------------
beta <- 0.5 # 1 then 0.5
## ----------------------------------------------
## Home store advantage
## ----------------------------------------------
home_adv <- 0.5
## ----------------------------------------------
## Make store specific utilities
## ----------------------------------------------
store_quality <- c(3.5, 3.4, 3.3, 3.1)
#store_quality <- c(3, 3, 3, 3)
#possible_price <- c(70:80)
#possible_price <- c(6, 7, 8, 9)
price_matrix <- matrix(nrow = length(seq(0, 300, 10)), ncol = 4)
price_matrix[,1] <- seq(0, 300, 10)
price_matrix[,2] <- seq(0, 300, 10)
price_matrix[,3] <- seq(0, 300, 10)
price_matrix[,4] <- seq(0, 300, 10)
#price_matrix <- permutations(n=length(possible_price), r=4, v = possible_price, repeats.allowed = T)
# But what if every store has the same price, but one changes?
price_matrix <- matrix(nrow = length(seq(1, 30, 1)), ncol = 4)
price_matrix[,1] <- rep(3, times = nrow(price_matrix))
price_matrix[,2] <- rep(3, times = nrow(price_matrix))
price_matrix[,3] <- rep(3, times = nrow(price_matrix))
#price_matrix[,3] <- seq(1, 30, 1)
price_matrix[,4] <- seq(1, 30, 1)
#rep(50, times = nrow(price_matrix))
## ----------------------------------------------
## Create node/buyer matrices
## ----------------------------------------------
full_df <- data.frame(matrix(nrow = 0, ncol = 7))
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
start_loop <- Sys.time()
for(p in 1:nrow(price_matrix)){
for(n in 1:n_nodes){
M <- matrix(NA, nrow = n_buyers*n_nodes, ncol = ncol(full_df)-1)
M[,1] <- rep(store_quality, n_buyers) # -- fill in the V_n
M[,2] <- rep(home_adv, n_buyers) # -- fill in the buy-from-home preference
M[,3] <- rep(log(income_means[n]), n_buyers*n_nodes) # -- fill in the income
M[,4] <- rep(log(price_matrix[p,]), n_buyers) # -- fill in the price
M[,5] <- rep(distances[,n], n_buyers) # -- fill in the distances
# the following shock can dramatically change the outcome
M[,6] <- rtruncnorm(n_buyers*n_nodes,
a = -2,
b = 2,
mean = 0,
sd = 0.75)
I <- matrix(c(1,1,p_means[n]*alpha,-p_means[n]*alpha,-t_means[n]*beta,1))
U <- M %*% I
B_df <- as.data.frame(M)
B_df <- cbind(B_df, U)
full_df <- rbind(full_df, B_df)
}
}
end_loop <- Sys.time()
time_to_run <- end_loop - start_loop
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
## ----------------------------------------------
## Make store names
## ----------------------------------------------
store_names <- c("A", "B", "C", "D")
store_names <- rep(store_names, times = n_buyers*n_nodes*p)
buyer_ids <- rep(1:(n_buyers*n_nodes), each = n_nodes, times = p)
buyer_node <- rep(c("A", "B", "C", "D"), each = n_buyers*n_nodes, times = p)
price_row <- rep(1:p, each = n_nodes*n_buyers*n_nodes)
full_df %<>%
add_column(buyer_ids, .before = "vn") %>%
add_column(price_row, .before = "vn") %>%
add_column(store_names, .before = "vn") %>%
add_column(buyer_node, .after = "buyer_ids")
tmp <- full_df %>%
group_by(buyer_ids, price_row) %>%
mutate(max_u = ifelse(utiltiy == max(utiltiy) & utiltiy > 0, 1, 0))
expend_df <- tmp %>%
group_by(price_row, price, store_names
, buyer_node # -- comment out for total expenditure in a store
) %>%
summarise(expenditure = sum(max_u)) %>%
mutate(revenue = expenditure*price)
expend_df %>%
group_by(price_row, price, store_names) %>%
summarise(total_rev = sum(revenue)) %>%
ggplot(aes(x = total_rev, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point() +
#geom_jitter(height = 0.15, width = 0,) +
facet_wrap(~store_names) +
labs(x = "Total Rev.", y = "ln(Price)") +
theme_bw()
expend_df %>%
ggplot(aes(x = revenue, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0, width = 0, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Rev. Earned", y = "Price", color = "Buyer Origin") +
theme_bw()
expend_df %>%
ggplot(aes(x = expenditure, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0, width = 0, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Units Sold", y = "Price", color = "Buyer Origin") +
theme_bw()
zeros_by_price <- tmp %>%
group_by(price, store_names, buyer_node) %>%
summarise(units_sold = sum(max_u))
knitr::opts_chunk$set(echo = TRUE)
##---------------------------------------------------------------
##                  Remove unnecessary clutter                  --
##---------------------------------------------------------------
rm(list = ls()) # Take out the Environment "trash"
cat("\014")  # Clear console, making error checking easier
while(!is.null(dev.list())) dev.off() # Clear old plots
#setwd("~/")
##---------------------------------------------------------------
##                        Load Packages                        --
##---------------------------------------------------------------
library(bannerCommenter)
library(tidyverse)
library(truncnorm)
library(magrittr)
library(gtools)
set.seed(298475)
## -------------------------------------------
## Define number nodes and each buyer in node
## -------------------------------------------
n_nodes <- 4
n_buyers <- 300
## -------------------------------------------
## Make income matrix
## -------------------------------------------
income_means <- c(620, 610, 605, 590)
income_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(i in 1:n_nodes){
vec_inc <- rep(income_means[i], n_buyers)
income_dat[, i] <- vec_inc
}
## -------------------------------------------
## Make travel cost matrix
## -------------------------------------------
t_means <- c(1, 1.2, 1.4, 1.8)
t_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(t in 1:n_nodes){
vec_t <- rep(t_means[t], n_buyers)
t_dat[, t] <- vec_t
}
## ----------------------------------------------
## Distance matrix (manually)
## ----------------------------------------------
distances1 <- c(0, 1, 1, sqrt(2))
distances2 <- c(1, 0, sqrt(2), 1)
distances3 <- c(1, sqrt(2), 0, 1)
distances4 <- c(sqrt(2), 1, 1, 0)
distances <- data.frame(distances1, distances2, distances3, distances4)
## -------------------------------------------
## Make price sensitivity vector
## -------------------------------------------
p_means <- c(0.75, 1, 1, 1.5)
#p_means <- c(1, 1, 1, 1)
## ----------------------------------------------
## Price sensitivity
## ----------------------------------------------
alpha <- 1
## ----------------------------------------------
## Distance multiplier
## ----------------------------------------------
beta <- 0.5 # 1 then 0.5
## ----------------------------------------------
## Home store advantage
## ----------------------------------------------
home_adv <- 0.5
## ----------------------------------------------
## Make store specific utilities
## ----------------------------------------------
store_quality <- c(3.5, 3.4, 3.3, 3.1)
#store_quality <- c(3, 3, 3, 3)
#possible_price <- c(70:80)
#possible_price <- c(6, 7, 8, 9)
price_matrix <- matrix(nrow = length(seq(0, 300, 10)), ncol = 4)
price_matrix[,1] <- seq(0, 300, 10)
price_matrix[,2] <- seq(0, 300, 10)
price_matrix[,3] <- seq(0, 300, 10)
price_matrix[,4] <- seq(0, 300, 10)
#price_matrix <- permutations(n=length(possible_price), r=4, v = possible_price, repeats.allowed = T)
# But what if every store has the same price, but one changes?
price_matrix <- matrix(nrow = length(seq(1, 30, 1)), ncol = 4)
price_matrix[,1] <- rep(2, times = nrow(price_matrix))
price_matrix[,2] <- rep(2, times = nrow(price_matrix))
price_matrix[,3] <- rep(2, times = nrow(price_matrix))
#price_matrix[,3] <- seq(1, 30, 1)
price_matrix[,4] <- seq(1, 30, 1)
#rep(50, times = nrow(price_matrix))
## ----------------------------------------------
## Create node/buyer matrices
## ----------------------------------------------
full_df <- data.frame(matrix(nrow = 0, ncol = 7))
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
start_loop <- Sys.time()
for(p in 1:nrow(price_matrix)){
for(n in 1:n_nodes){
M <- matrix(NA, nrow = n_buyers*n_nodes, ncol = ncol(full_df)-1)
M[,1] <- rep(store_quality, n_buyers) # -- fill in the V_n
M[,2] <- rep(home_adv, n_buyers) # -- fill in the buy-from-home preference
M[,3] <- rep(log(income_means[n]), n_buyers*n_nodes) # -- fill in the income
M[,4] <- rep(log(price_matrix[p,]), n_buyers) # -- fill in the price
M[,5] <- rep(distances[,n], n_buyers) # -- fill in the distances
# the following shock can dramatically change the outcome
M[,6] <- rtruncnorm(n_buyers*n_nodes,
a = -2,
b = 2,
mean = 0,
sd = 0.75)
I <- matrix(c(1,1,p_means[n]*alpha,-p_means[n]*alpha,-t_means[n]*beta,1))
U <- M %*% I
B_df <- as.data.frame(M)
B_df <- cbind(B_df, U)
full_df <- rbind(full_df, B_df)
}
}
end_loop <- Sys.time()
time_to_run <- end_loop - start_loop
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
## ----------------------------------------------
## Make store names
## ----------------------------------------------
store_names <- c("A", "B", "C", "D")
store_names <- rep(store_names, times = n_buyers*n_nodes*p)
buyer_ids <- rep(1:(n_buyers*n_nodes), each = n_nodes, times = p)
buyer_node <- rep(c("A", "B", "C", "D"), each = n_buyers*n_nodes, times = p)
price_row <- rep(1:p, each = n_nodes*n_buyers*n_nodes)
full_df %<>%
add_column(buyer_ids, .before = "vn") %>%
add_column(price_row, .before = "vn") %>%
add_column(store_names, .before = "vn") %>%
add_column(buyer_node, .after = "buyer_ids")
tmp <- full_df %>%
group_by(buyer_ids, price_row) %>%
mutate(max_u = ifelse(utiltiy == max(utiltiy) & utiltiy > 0, 1, 0))
expend_df <- tmp %>%
group_by(price_row, price, store_names
, buyer_node # -- comment out for total expenditure in a store
) %>%
summarise(expenditure = sum(max_u)) %>%
mutate(revenue = expenditure*price)
expend_df %>%
group_by(price_row, price, store_names) %>%
summarise(total_rev = sum(revenue)) %>%
ggplot(aes(x = total_rev, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point() +
#geom_jitter(height = 0.15, width = 0,) +
facet_wrap(~store_names) +
labs(x = "Total Rev.", y = "ln(Price)") +
theme_bw()
expend_df %>%
ggplot(aes(x = revenue, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0, width = 0, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Rev. Earned", y = "Price", color = "Buyer Origin") +
theme_bw()
expend_df %>%
ggplot(aes(x = expenditure, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0, width = 0, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Units Sold", y = "Price", color = "Buyer Origin") +
theme_bw()
zeros_by_price <- tmp %>%
group_by(price, store_names, buyer_node) %>%
summarise(units_sold = sum(max_u))
