## ----------------------------------------------
alpha <- 1
## ----------------------------------------------
## Home store advantage
## ----------------------------------------------
home_adv <- 0.5
## ----------------------------------------------
## Make store specific utilities
## ----------------------------------------------
store_quality <- c(2, 2, 1, 3)
#possible_price <- c(70:80)
#possible_price <- c(6, 7, 8, 9)
price_matrix <- matrix(nrow = length(seq(0, 300, 10)), ncol = 4)
price_matrix[,1] <- seq(0, 300, 10)
price_matrix[,2] <- seq(0, 300, 10)
price_matrix[,3] <- seq(0, 300, 10)
price_matrix[,4] <- seq(0, 300, 10)
#price_matrix <- permutations(n=length(possible_price), r=4, v = possible_price, repeats.allowed = T)
# But what if every store has the same price, but one changes?
price_matrix <- matrix(nrow = length(seq(500, 900, 10)), ncol = 4)
price_matrix[,1] <- rep(700, times = nrow(price_matrix))
price_matrix[,2] <- rep(700, times = nrow(price_matrix))
price_matrix[,3] <- rep(700, times = nrow(price_matrix))
price_matrix[,4] <- seq(500, 900, 10)
#rep(50, times = nrow(price_matrix))
## ----------------------------------------------
## Create node/buyer matrices
## ----------------------------------------------
full_df <- data.frame(matrix(nrow = 0, ncol = 7))
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
start_loop <- Sys.time()
for(p in 1:nrow(price_matrix)){
for(n in 1:n_nodes){
M <- matrix(NA, nrow = n_buyers*n_nodes, ncol = ncol(full_df)-1)
M[,1] <- rep(store_quality, n_buyers) # -- fill in the V_n
M[,2] <- rep(home_adv, n_buyers) # -- fill in the buy-from-home preference
M[,3] <- rep(log(income_means[n]), n_buyers*n_nodes) # -- fill in the income
M[,4] <- rep(log(price_matrix[p,]), n_buyers) # -- fill in the price
M[,5] <- rep(distances[,n], n_buyers) # -- fill in the distances
# the following shock can dramatically change the outcome
M[,6] <- rtruncnorm(n_buyers*n_nodes,
a = -5,
b = 5,
mean = 0,
sd = 0.75)
I <- matrix(c(1,1,1,-1,-t_means[n]*alpha,1))
U <- M %*% I
B_df <- as.data.frame(M)
B_df <- cbind(B_df, U)
full_df <- rbind(full_df, B_df)
}
}
end_loop <- Sys.time()
time_to_run <- end_loop - start_loop
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
## ----------------------------------------------
## Make store names
## ----------------------------------------------
store_names <- c("A", "B", "C", "D")
store_names <- rep(store_names, times = n_buyers*n_nodes*p)
buyer_ids <- rep(1:(n_buyers*n_nodes), each = n_nodes, times = p)
buyer_node <- rep(c("A", "B", "C", "D"), each = n_buyers*n_nodes, times = p)
price_row <- rep(1:p, each = n_nodes*n_buyers*n_nodes)
full_df %<>%
add_column(buyer_ids, .before = "vn") %>%
add_column(price_row, .before = "vn") %>%
add_column(store_names, .before = "vn") %>%
add_column(buyer_node, .after = "buyer_ids")
tmp <- full_df %>%
group_by(buyer_ids, price_row) %>%
mutate(max_u = ifelse(utiltiy == max(utiltiy) & utiltiy > 0, 1, 0))
expend_df <- tmp %>%
group_by(price_row, price, store_names
, buyer_node # -- comment out for total expenditure in a store
) %>%
summarise(expenditure = sum(max_u)) %>%
mutate(revenue = expenditure*price)
expend_df %>%
group_by(price_row, price, store_names) %>%
summarise(total_rev = sum(revenue)) %>%
ggplot(aes(x = total_rev, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point() +
geom_jitter(height = 0.15) +
facet_wrap(~store_names) +
labs(x = "Total Rev.", y = "Price") +
theme_bw()
expend_df %>%
ggplot(aes(x = revenue, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0.15, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Rev. Earned", y = "Price", color = "Buyer Origin") +
theme_bw()
expend_df %>%
ggplot(aes(x = expenditure, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0.15, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Units Sold", y = "Price", color = "Buyer Origin") +
theme_bw()
zeros_by_price <- tmp %>%
group_by(price, store_names, buyer_node) %>%
summarise(units_sold = sum(max_u))
knitr::opts_chunk$set(echo = TRUE)
##---------------------------------------------------------------
##                  Remove unnecessary clutter                  --
##---------------------------------------------------------------
rm(list = ls()) # Take out the Environment "trash"
cat("\014")  # Clear console, making error checking easier
while(!is.null(dev.list())) dev.off() # Clear old plots
#setwd("~/")
##---------------------------------------------------------------
##                        Load Packages                        --
##---------------------------------------------------------------
library(bannerCommenter)
library(tidyverse)
library(truncnorm)
library(magrittr)
library(gtools)
set.seed(298475)
## -------------------------------------------
## Define number nodes and each buyer in node
## -------------------------------------------
n_nodes <- 4
n_buyers <- 300
## -------------------------------------------
## Make income matrix
## -------------------------------------------
income_means <- c(600, 700, 500, 900)
income_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(i in 1:n_nodes){
vec_inc <- rep(income_means[i], n_buyers)
income_dat[, i] <- vec_inc
}
## -------------------------------------------
## Make travel cost matrix
## -------------------------------------------
t_means <- c(2, 2, 3, 1)
t_dat <- data.frame(matrix(data = NA, nrow = n_buyers, ncol = n_nodes))
for(t in 1:n_nodes){
vec_t <- rep(t_means[t], n_buyers)
t_dat[, t] <- vec_t
}
## ----------------------------------------------
## Distance matrix (manually)
## ----------------------------------------------
distances1 <- c(0, 1, 1, sqrt(2))
distances2 <- c(1, 0, sqrt(2), 1)
distances3 <- c(1, sqrt(2), 0, 1)
distances4 <- c(sqrt(2), 1, 1, 0)
distances <- data.frame(distances1, distances2, distances3, distances4)
## ----------------------------------------------
## Distance multiplier
## ----------------------------------------------
alpha <- 1
## ----------------------------------------------
## Home store advantage
## ----------------------------------------------
home_adv <- 0.5
## ----------------------------------------------
## Make store specific utilities
## ----------------------------------------------
store_quality <- c(2, 2, 1, 3)
#possible_price <- c(70:80)
#possible_price <- c(6, 7, 8, 9)
price_matrix <- matrix(nrow = length(seq(0, 300, 10)), ncol = 4)
price_matrix[,1] <- seq(0, 300, 10)
price_matrix[,2] <- seq(0, 300, 10)
price_matrix[,3] <- seq(0, 300, 10)
price_matrix[,4] <- seq(0, 300, 10)
#price_matrix <- permutations(n=length(possible_price), r=4, v = possible_price, repeats.allowed = T)
# But what if every store has the same price, but one changes?
price_matrix <- matrix(nrow = length(seq(50, 1000, 10)), ncol = 4)
price_matrix[,1] <- rep(700, times = nrow(price_matrix))
price_matrix[,2] <- rep(700, times = nrow(price_matrix))
price_matrix[,3] <- rep(700, times = nrow(price_matrix))
price_matrix[,4] <- seq(50, 1000, 10)
#rep(50, times = nrow(price_matrix))
## ----------------------------------------------
## Create node/buyer matrices
## ----------------------------------------------
full_df <- data.frame(matrix(nrow = 0, ncol = 7))
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
start_loop <- Sys.time()
for(p in 1:nrow(price_matrix)){
for(n in 1:n_nodes){
M <- matrix(NA, nrow = n_buyers*n_nodes, ncol = ncol(full_df)-1)
M[,1] <- rep(store_quality, n_buyers) # -- fill in the V_n
M[,2] <- rep(home_adv, n_buyers) # -- fill in the buy-from-home preference
M[,3] <- rep(log(income_means[n]), n_buyers*n_nodes) # -- fill in the income
M[,4] <- rep(log(price_matrix[p,]), n_buyers) # -- fill in the price
M[,5] <- rep(distances[,n], n_buyers) # -- fill in the distances
# the following shock can dramatically change the outcome
M[,6] <- rtruncnorm(n_buyers*n_nodes,
a = -5,
b = 5,
mean = 0,
sd = 0.75)
I <- matrix(c(1,1,1,-1,-t_means[n]*alpha,1))
U <- M %*% I
B_df <- as.data.frame(M)
B_df <- cbind(B_df, U)
full_df <- rbind(full_df, B_df)
}
}
end_loop <- Sys.time()
time_to_run <- end_loop - start_loop
colnames(full_df) <- c("vn", "home_dummy", "income", "price", "distance", "shock", "utiltiy")
## ----------------------------------------------
## Make store names
## ----------------------------------------------
store_names <- c("A", "B", "C", "D")
store_names <- rep(store_names, times = n_buyers*n_nodes*p)
buyer_ids <- rep(1:(n_buyers*n_nodes), each = n_nodes, times = p)
buyer_node <- rep(c("A", "B", "C", "D"), each = n_buyers*n_nodes, times = p)
price_row <- rep(1:p, each = n_nodes*n_buyers*n_nodes)
full_df %<>%
add_column(buyer_ids, .before = "vn") %>%
add_column(price_row, .before = "vn") %>%
add_column(store_names, .before = "vn") %>%
add_column(buyer_node, .after = "buyer_ids")
tmp <- full_df %>%
group_by(buyer_ids, price_row) %>%
mutate(max_u = ifelse(utiltiy == max(utiltiy) & utiltiy > 0, 1, 0))
expend_df <- tmp %>%
group_by(price_row, price, store_names
, buyer_node # -- comment out for total expenditure in a store
) %>%
summarise(expenditure = sum(max_u)) %>%
mutate(revenue = expenditure*price)
expend_df %>%
group_by(price_row, price, store_names) %>%
summarise(total_rev = sum(revenue)) %>%
ggplot(aes(x = total_rev, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point() +
geom_jitter(height = 0.15) +
facet_wrap(~store_names) +
labs(x = "Total Rev.", y = "Price") +
theme_bw()
expend_df %>%
ggplot(aes(x = revenue, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0.15, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Rev. Earned", y = "Price", color = "Buyer Origin") +
theme_bw()
expend_df %>%
ggplot(aes(x = expenditure, y = price)) +
#geom_line(aes(color = as.factor(buyer_node))) +
geom_point(aes(color = as.factor(buyer_node))) +
geom_jitter(height = 0.15, aes(color = as.factor(buyer_node))) +
facet_wrap(~store_names) +
labs(x = "Units Sold", y = "Price", color = "Buyer Origin") +
theme_bw()
zeros_by_price <- tmp %>%
group_by(price, store_names, buyer_node) %>%
summarise(units_sold = sum(max_u))
##---------------------------------------------------------------
##                  Analyze Full Gerrymandering Data           --
##---------------------------------------------------------------
library(readxl)
library(MASS)
library(ggplot2)
library(viridis)
library(dplyr)
library(miceadds)
library(stringr)
library(gdata)
library(latex2exp)
library(tidyr)
library(ggpubr)
library(raster)
library("stats")
library(estimatr)
library(lmtest)
library(sandwich)
library(grid)
library(gridExtra)
library("matrixStats")
library(car)
library(plm)
library(stargazer)
library(magrittr)
library(texreg)
library(xtable)
library(tibble)
library(lme4)
library(nlme)
##---------------------------------------------------------------
##                  Remove unnecessary clutter                  --
##---------------------------------------------------------------
rm(list = ls()) # Take out the Environment "trash"
cat("\014")  # Clear console, making error checking easier
while(!is.null(dev.list())) dev.off() # Clear old plots
setwd("~/Desktop/Research/GerryMandering/An_Anderson_Deck/Raw_Data")
# read in all data files for sessions 1 through 8
for(i in 1:16){
if(i > 9){
x <- read_excel(paste("Cleaned_Raw_Session_", i, ".xlsx", sep = "")) %>% dplyr::select(
Period, Subject, Player, partner, LType, Map_Selection = Map, EDG5:EW1, TE1:TE5, pEDG5:pEW1, Win1:Win5
) %>% mutate(Session = i)
nam <- paste("df", i, sep = "_")
assign(nam, x)
}else{
x <- read_excel(paste("Cleaned_Raw_Session_0", i, ".xlsx", sep = "")) %>% dplyr::select(
Period, Subject, Player, partner, LType, Map_Selection = Map, EDG5:EW1, TE1:TE5, pEDG5:pEW1, Win1:Win5
) %>% mutate(Session = i)
nam <- paste("df", i, sep = "_")
assign(nam, x)
}
}
# combine data vertically
df <- rbind(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8)
# library(tidyr)
# long_df <- df %>% gather(District, Effort, EDG5:EW1)
df <- df %>% rename(Partner = partner,
EDG_5 = EDG5, EDG_4 = EDG4, EDG_3 = EDG3, EDG_2 = EDG2, EDG_1 = EDG1,
ELG_5 = ELG5, ELG_4 = ELG4, ELG_3 = ELG3, ELG_2 = ELG2, ELG_1 = ELG1,
EW_5  = EW5, EW_4  = EW4, EW_3  = EW3, EW_2  = EW2, EW_1  = EW1,
TE_5 = TE5, TE_4 = TE4, TE_3 = TE3, TE_2 = TE2, TE_1 = TE1,
pEDG_5 = pEDG5, pEDG_4 = pEDG4, pEDG_3 = pEDG3, pEDG_2 = pEDG2, pEDG_1 = pEDG1,
pELG_5 = pELG5, pELG_4 = pELG4, pELG_3 = pELG3, pELG_2 = pELG2, pELG_1 = pELG1,
pEW_5  = pEW5, pEW_4  = pEW4, pEW_3  = pEW3, pEW_2  = pEW2, pEW_1  = pEW1
)
long_df <- df %>% dplyr::select(Session, Period, Subject, Player, Partner, LType, EDG_5:EW_1, pEDG_5:pEW_1) %>% gather(District, Effort, EDG_5:pEW_1)
# Orderly data with district, Map, and effort amount for each subject each period in each session
# No need to use long_df_map because already renamed them manually above
df_clean <- long_df %>% separate(District, c("District", "Map")) %>% filter(!grepl("p", District))
##---------------------------------------------------------------
##                  Main Regression Table                      --
##---------------------------------------------------------------
stage_1_regression_data <- df %>% dplyr::select(Session, Period, Subject, Player, TE_1:TE_5) %>%
filter(Period >= 15 & Period <= 24) %>%
gather(Map, Effort, TE_1:TE_5)
View(stage_1_regression_data)
library(readxl)
library(MASS)
library(ggplot2)
library(viridis)
library(dplyr)
library(miceadds)
library(stringr)
library(gdata)
library(latex2exp)
library(tidyr)
library(ggpubr)
library(raster)
library("stats")
library(estimatr)
library(lmtest)
library(sandwich)
library(grid)
library(gridExtra)
library("matrixStats")
library(car)
library(plm)
library(stargazer)
library(magrittr)
library(texreg)
library(xtable)
library(tibble)
library(lme4)
library(nlme)
##---------------------------------------------------------------
##                  Remove unnecessary clutter                  --
##---------------------------------------------------------------
rm(list = ls()) # Take out the Environment "trash"
cat("\014")  # Clear console, making error checking easier
while(!is.null(dev.list())) dev.off() # Clear old plots
setwd("~/Desktop/Research/GerryMandering/An_Anderson_Deck/Raw_Data")
# read in all data files for sessions 1 through 8
for(i in 1:16){
if(i > 9){
x <- read_excel(paste("Cleaned_Raw_Session_", i, ".xlsx", sep = "")) %>% dplyr::select(
Period, Subject, Player, partner, LType, Map_Selection = Map, EDG5:EW1, TE1:TE5, pEDG5:pEW1, Win1:Win5
) %>% mutate(Session = i)
nam <- paste("df", i, sep = "_")
assign(nam, x)
}else{
x <- read_excel(paste("Cleaned_Raw_Session_0", i, ".xlsx", sep = "")) %>% dplyr::select(
Period, Subject, Player, partner, LType, Map_Selection = Map, EDG5:EW1, TE1:TE5, pEDG5:pEW1, Win1:Win5
) %>% mutate(Session = i)
nam <- paste("df", i, sep = "_")
assign(nam, x)
}
}
# combine data vertically
df <- rbind(df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8, df_9, df_10, df_11, df_12, df_13, df_14, df_15, df_16)
# library(tidyr)
# long_df <- df %>% gather(District, Effort, EDG5:EW1)
df <- df %>% rename(Partner = partner,
EDG_5 = EDG5, EDG_4 = EDG4, EDG_3 = EDG3, EDG_2 = EDG2, EDG_1 = EDG1,
ELG_5 = ELG5, ELG_4 = ELG4, ELG_3 = ELG3, ELG_2 = ELG2, ELG_1 = ELG1,
EW_5  = EW5, EW_4  = EW4, EW_3  = EW3, EW_2  = EW2, EW_1  = EW1,
TE_5 = TE5, TE_4 = TE4, TE_3 = TE3, TE_2 = TE2, TE_1 = TE1,
pEDG_5 = pEDG5, pEDG_4 = pEDG4, pEDG_3 = pEDG3, pEDG_2 = pEDG2, pEDG_1 = pEDG1,
pELG_5 = pELG5, pELG_4 = pELG4, pELG_3 = pELG3, pELG_2 = pELG2, pELG_1 = pELG1,
pEW_5  = pEW5, pEW_4  = pEW4, pEW_3  = pEW3, pEW_2  = pEW2, pEW_1  = pEW1
)
long_df <- df %>% dplyr::select(Session, Period, Subject, Player, Partner, LType, EDG_5:EW_1, pEDG_5:pEW_1) %>% gather(District, Effort, EDG_5:pEW_1)
# Orderly data with district, Map, and effort amount for each subject each period in each session
# No need to use long_df_map because already renamed them manually above
df_clean <- long_df %>% separate(District, c("District", "Map")) %>% filter(!grepl("p", District))
##---------------------------------------------------------------
##                  Main Regression Table                      --
##---------------------------------------------------------------
stage_1_regression_data <- df %>% dplyr::select(Session, Period, Subject, Player, TE_1:TE_5) %>%
filter(Period >= 15 & Period <= 24) %>%
gather(Map, Effort, TE_1:TE_5)
stage_1_regression_data <- stage_1_regression_data %>%
mutate(subject.id = as.factor(Session*8-(8-Subject)),
Player_B = ifelse(Player== "B", 1, 0),
Gerry_B = ifelse(Map == "TE_1", 1, 0),
Symm_1_1 = ifelse(Map == "TE_2", 1, 0),
Symm_1_3 = ifelse(Map == "TE_3", 1, 0),
Symm_3_1 = ifelse(Map == "TE_4", 1, 0),
Gerry_A = ifelse(Map == "TE_5", 1, 0),
Adv = ifelse((Map == "TE_1" & Player == "B")|(Map == "TE_5" & Player == "A"), 1,0),
Disadv = ifelse((Map == "TE_1" & Player == "A")|(Map == "TE_5" & Player == "B"), 1,0),
Stage_2_indicator = ifelse((Period > 24 & Period < 28), 1, 0) # this is currently useless (all zeros)
)
stage_1_regression_data <- stage_1_regression_data %>%
mutate(subject.id = as.factor(as.numeric(Session)*8-(8-as.numeric(Subject))),
Player_B = ifelse(Player== "B", 1, 0),
Gerry_B = ifelse(Map == "TE_1", 1, 0),
Symm_1_1 = ifelse(Map == "TE_2", 1, 0),
Symm_1_3 = ifelse(Map == "TE_3", 1, 0),
Symm_3_1 = ifelse(Map == "TE_4", 1, 0),
Gerry_A = ifelse(Map == "TE_5", 1, 0),
Adv = ifelse((Map == "TE_1" & Player == "B")|(Map == "TE_5" & Player == "A"), 1,0),
Disadv = ifelse((Map == "TE_1" & Player == "A")|(Map == "TE_5" & Player == "B"), 1,0),
Stage_2_indicator = ifelse((Period > 24 & Period < 28), 1, 0) # this is currently useless (all zeros)
)
##---------------------------------------------------------------
##                  Main Regression Table                      --
##---------------------------------------------------------------
stage_1_regression_data <- df %>% dplyr::select(Session, Period, Subject, Player, TE_1:TE_5) %>%
filter(Period >= 15 & Period <= 24) %>%
gather(Map, Effort, TE_1:TE_5)
stage_1_regression_data <- stage_1_regression_data %>%
mutate(subject.id = as.factor(as.numeric(Session)*8-(8-as.numeric(Subject))),
Player_B = ifelse(Player== "B", 1, 0),
Gerry_B = ifelse(Map == "TE_1", 1, 0),
Symm_1_1 = ifelse(Map == "TE_2", 1, 0),
Symm_1_3 = ifelse(Map == "TE_3", 1, 0),
Symm_3_1 = ifelse(Map == "TE_4", 1, 0),
Gerry_A = ifelse(Map == "TE_5", 1, 0),
Adv = ifelse((Map == "TE_1" & Player == "B")|(Map == "TE_5" & Player == "A"), 1,0),
Disadv = ifelse((Map == "TE_1" & Player == "A")|(Map == "TE_5" & Player == "B"), 1,0),
Stage_2_indicator = ifelse((Period > 24 & Period < 28), 1, 0) # this is currently useless (all zeros)
)
# First set of sessions
stage_1_first_sessions <- stage_1_regression_data %>% filter(as.numeric(Session) < 9)
map_impact_on_stage_1_first_sessions_no_learning <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1, data = stage_1_first_sessions)
# Look at subject Fixed Effects and standard errors clustered at session level
map_impact_on_stage_1_first_sessions_no_learning_FE <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1 + subject.id, data = stage_1_first_sessions)
# What about if there is learning occurring?
stage_1_first_sessions_with_learnng <- stage_1_first_sessions %>% filter(Period >=20)
map_impact_on_stage_1_first_sessions_with_learning <- lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1, data = stage_1_first_sessions_with_learnng)
# Look at subject Fixed Effects and standard errors clustered at session level
map_impact_on_stage_1_first_sessions_with_learning_FE <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1 + subject.id, data = stage_1_first_sessions_with_learnng)
# Second set of sessions
stage_1_second_sessions <- stage_1_regression_data %>% filter(as.numeric(Session) > 8)
map_impact_on_stage_1_second_sessions_no_learning <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1, data = stage_1_second_sessions)
map_impact_on_stage_1_second_sessions_no_learning_FE <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1 + subject.id, data = stage_1_second_sessions)
stage_1_second_sessions_with_learnng <- stage_1_second_sessions %>% filter(Period >=20)
map_impact_on_stage_1_second_sessions_with_learning <- lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1, data = stage_1_second_sessions_with_learnng)
map_impact_on_stage_1_second_sessions_with_learning_FE <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1 + subject.id, data = stage_1_second_sessions_with_learnng)
# Both sessions
stage_1_full_sessions <- stage_1_regression_data
map_impact_on_stage_1_full_sessions_no_learning <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1, data = stage_1_full_sessions)
map_impact_on_stage_1_full_sessions_no_learning_FE <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1 + subject.id, data = stage_1_full_sessions)
stage_1_full_sessions_with_learnng <- stage_1_full_sessions %>% filter(Period >=20)
map_impact_on_stage_1_full_sessions_with_learning <- lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1, data = stage_1_full_sessions_with_learnng)
map_impact_on_stage_1_full_sessions_with_learning_FE <-lm(Effort ~ Adv + Disadv + Symm_1_3 + Symm_3_1 + subject.id, data = stage_1_full_sessions_with_learnng)
# Make regression table
stargazer(map_impact_on_stage_1_first_sessions_no_learning_FE,
map_impact_on_stage_1_first_sessions_with_learning_FE,
map_impact_on_stage_1_second_sessions_no_learning_FE,
map_impact_on_stage_1_second_sessions_with_learning_FE,
map_impact_on_stage_1_full_sessions_no_learning_FE,
map_impact_on_stage_1_full_sessions_with_learning_FE,
title = "Map Impact on Stage 1 Bidding (FE and Clustereed SE)",
column.labels = c("First Sessions w/out learning", "First Sessions w/ learning",
"Second Sessions w/out learning", "Second Sessions w/ learning",
"Full Sessions w/out learning", "Full Sessions w/ learning"),
label = "Tab:stage_1_with_and_without_learning_FE_CSE",
omit = "subject.id", single.row = T)
# Make regression table
stargazer(map_impact_on_stage_1_first_sessions_no_learning_FE,
map_impact_on_stage_1_first_sessions_with_learning_FE,
title = "Map Impact on Stage 1 Bidding: First 8 Sessions",
column.labels = c("w/out learning", "w/ learning"),
label = "Tab:stage_1_first_sessions_with_and_without_learning_FE_CSE",
omit = "subject.id", single.row = T)
stargazer(map_impact_on_stage_1_second_sessions_no_learning_FE,
map_impact_on_stage_1_second_sessions_with_learning_FE,
title = "Map Impact on Stage 1 Bidding: Second 8 Sessions",
column.labels = c("w/out learning", "w/ learning"),
label = "Tab:stage_1_second_sessions_with_and_without_learning_FE_CSE",
omit = "subject.id", single.row = T)
stargazer(map_impact_on_stage_1_full_sessions_no_learning_FE,
map_impact_on_stage_1_full_sessions_with_learning_FE,
title = "Map Impact on Stage 1 Bidding: Full 16 Sessions",
column.labels = c("w/out learning", "w/ learning"),
label = "Tab:stage_1_full_sessions_with_and_without_learning_FE_CSE",
omit = "subject.id", single.row = T)
